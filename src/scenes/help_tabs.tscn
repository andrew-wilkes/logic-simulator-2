[gd_scene load_steps=2 format=3 uid="uid://b1a77l6rte3i"]

[ext_resource type="Theme" uid="uid://gleoxvoch1e4" path="res://assets/ui/tab_panel_theme.tres" id="1_i760r"]

[node name="HelpTabs" type="TabContainer"]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme = ExtResource("1_i760r")

[node name="Overview" type="MarginContainer" parent="."]
layout_mode = 2
theme_override_constants/margin_left = 10
theme_override_constants/margin_top = 10
theme_override_constants/margin_right = 10
theme_override_constants/margin_bottom = 10

[node name="RichText" type="RichTextLabel" parent="Overview"]
layout_mode = 2
theme_override_colors/default_color = Color(0.152941, 0.152941, 0.152941, 1)
bbcode_enabled = true
text = "[b]Placing Parts[/b]
Circuits are created by selecting parts from the Parts List panel which get placed near the top left of the schematic area.

The parts are then selected with the left mouse button and dragged into position. Selected parts become brighter. Multiple parts may be selected by rubber-band selecting them with the mouse. Clicking in blank space de-selects the part(s).

Pressing the delete key, deletes the selected parts.

Ctrl + Left click allows for selecting multiple parts one by one.

Ctrl + D duplicates the selected parts at the current position of the mouse based off the first-selected part position.

[b]Wires and Busses[/b]
Connection lines may be added between pins of the same type. These are designated by color coding. Wires carry bit data of logic 1 or 0. These are by default: white. Bus lines carry integer numbers between bus pins which are yellow by default.

Connections are made by clicking on a pin and dragging a line out to snap to another pin of the same type. To disconnect a line, drag away from the right-side connection.

Pins on the right side of parts may fan out to multiple end points, but pins on the left side only accept one input.

Pins on the left side of parts are inputs, and pins on the right side are outputs. So, some parts that normally have bi-directional data busses have these busses split between input data and output data such as for say a memory part. 

To hold a pin high or low, there are parts for V+ and Gnd available.

To colorize lines, there are the WireColor and BusColor parts that may be wired up to any output pin of that type. Right-clicking on the part opens a color selection panel. The chosen color affects the net of lines that the part is attached to.

The IO part has a control panel that pops up when right-clicked on. This allows for setting of its' wire and bus colors i.e. all of the pins of the part. The panel also allows for setting up how many pins it has, and a tool to edit the pin names. The pin names may be generated with an optional prefix and suffix charcter or string. Or the pin names may be individually edited. Then the names may be applied by clicking the [b]Apply[/b] button.

Another color customization feature is for the logic level indication. This is available via the Settings menu. By default, red is used for logic 1 and blue for logic 0. Another setting is for whether or not to indicate the logic levels from the output and/or to the input pins. When stimulating the circuit with inputs from the IO part, the wires change color if set to do so to indicate the logic level. The bus lines do not change color.

To remove logic level coloring of the wires during use, there is a colored button that may be pressed in the menu bar.

[b]Circuit Blocks[/b]
Previously saved circuits may be loaded as blocks. This causes them to appear as a part with pins mapped to unconnected IO pins of the circuit with the same pin names as those IO pins. Also, the circuit that was loaded as a block is added to the Part List under the Blocks list with the title of the Circuit or its file name if the Circuit was unnamed. Right-click on block part entry in the part list to remove it.

IO parts are required in order to obtain IO pins for block parts. One side of each of these parts should be fully un-connected for it to be deemed an input or output of the circuit when loaded as a block. Inside of a block, the IO Manager panel is no longer available. The internal IO parts of the block have their pins assigned to block pins in relation to their positions in the schematic diagram.

Circuits containing blocks that have been saved may also be loaded as blocks to nest or encapsulate their functionality into ever more complex circuits. This will impact speed since there will be exponential growth in the number of parts to be processed, but blocks do not involve coloring wires and visual elementss.

Chips encapsulate complex functionality in the most efficient manner since they directly implement their functionality rather than being comprised of basic parts.

[b]IO Parts[/b]
The IO part may be used to set the bus value and pin levels to stimulate the circuit. The current hex value is displayed on the part. This value may be edited by entering a decimal or hex number (0xff.. style) to set the value. The value is outputed from both sides of the part affecting whatever parts are connected to the IO part and that accept inputs in the direction of the value or level propagation. The value is applied after the enter key is pressed and the color of the text changes from orange to green.

Right-clicking on the IO part opens a panel that contains controls for entering the value, adjusting the value with a slider, or stepping the value up or down. The step buttons act like on a keyboard with a repeating action if held down. The panel may be moved so as not to obscure parts.

IO parts also capture and display values that they receive. The bus and wires of the IO part keep in sync as if wired in parallel, but the number of wires limit the range of numbers supported via the wired output pins. So a data input of 0xff may be clipped to 0xf if there were only 4 output wires used to connect the output.

It is best practice to only use the bus input or wire inputs for an IO part to avoid them fighting over what is the input value. When manually entering values with the slider or buttons, the Range setting limits the maximum value.

There are also single-pin parts to use for a bus or a wire input or output. These may be used for the IO pins of circuits that will be loaded as blocks or tested by the circuit testing feature.

[b]Part Numbering[/b]
When parts are added, they are given an internal part number that is displayed when hovering the mouse over a part. This is the number displayed in any error message or saved with the circuit. But, there is a Tool available to automtically number parts in a more normal way and it also sets the part tags with these numbers. Or the user may label the parts by editing the tag text labels.

[b]User Interface[/b]
The overall schematic diagram area may be panned and zoomed. Also, the grid can be turned on/off and snapping enabled or disabled. A mini-map is also provided for visualizing and panning around a large diagram.

The circuit has an editable Title label which is saved with the circuit and used as a name for an associated block.

The New button erases the circuit, Save saves to the current file or initiates the SaveAs dialog, and Load is used to open a saved circuit. Load as block inserts a block part into the current circuit. The Tools menu is available for tasks such as numbering parts. Settings are saved and loaded with the software. Circuits are saved with the schematic settings, part settings, connections, and data such as colors.

Quit the App. by pressing the Esc key. Unsaved changes are indicated by a red color of the file name.
"

[node name="Shortcuts" type="MarginContainer" parent="."]
visible = false
layout_mode = 2
theme_override_constants/margin_left = 10
theme_override_constants/margin_top = 10
theme_override_constants/margin_right = 10
theme_override_constants/margin_bottom = 10

[node name="RichText" type="RichTextLabel" parent="Shortcuts"]
layout_mode = 2
theme_override_colors/default_color = Color(0.152941, 0.152941, 0.152941, 1)
bbcode_enabled = true
text = "[b]Keyboard Shortcuts[/b]

Esc - Quit the program

Ctrl + N - New circuit (wipe the current circuit and start a new one)

Ctrl + S - Save the circuit or open the SaveAs popup panel

Ctrl + O or Ctrl + L - Open the panel for Loading circuits

Ctrl + P / Ctrl + Space - open the Part selection panel

Ctrl + T - open the Tool menu

Ctrl + H - open the Help panel

DEL - delete selected parts

Crtl + D - duplicate selected parts

Crtl + R - remove connections between selected parts"

[node name="Technicalities" type="MarginContainer" parent="."]
visible = false
layout_mode = 2
theme_override_constants/margin_left = 10
theme_override_constants/margin_top = 10
theme_override_constants/margin_right = 10
theme_override_constants/margin_bottom = 10

[node name="RichText" type="RichTextLabel" parent="Technicalities"]
layout_mode = 2
theme_override_colors/default_color = Color(0.152941, 0.152941, 0.152941, 1)
bbcode_enabled = true
text = "[b]Internal Operation[/b]
Internally, the value is propagated as an integer on the bus lines and as bits on wires. 8 bits take 8 steps to fully apply to 8 wires connected to a part so this may cause up to 8 changes of a parts' output until it is stable. This affect is not seen by the user since it should be between frame updates of the display. It is like the propagation delay in real circuits but much more delayed.

There is also detection for unstable circuits where the output is continually cycling and not stabilizing. This condition stops propagation of signals and an alert message is shown to the user with information as to what part and pin the problem was detected at. Hovering the mouse over a part reveals its part number.

A speed optimization that is used is to not propagate a level if there is no change to an input. An affect of this may be to not update a downstream wire color if its' color has been changed by the user. The speed of simulation will depend on circuit complexity and the speed of the computer being used, and what settings are applied to the circuit such as viewing logic levels and probing/displaying values.

Circuits are saved as text-based JSON data with a .circ file extension. So it's possible to edit and view the files in external text editors. Also, external tools could be used to generate or process these files.
"

[node name="Tools" type="MarginContainer" parent="."]
visible = false
layout_mode = 2
theme_override_constants/margin_left = 10
theme_override_constants/margin_top = 10
theme_override_constants/margin_right = 10
theme_override_constants/margin_bottom = 10

[node name="RichText" type="RichTextLabel" parent="Tools"]
layout_mode = 2
theme_override_colors/default_color = Color(0.152941, 0.152941, 0.152941, 1)
bbcode_enabled = true
text = "[b]Number parts[/b]

This is a utility to add part numbers to the Tags of the parts.

The part number index is based off the distance of the part from the top left corner of the schematic diagram.

The name prefix is taken from the name of the part.

This is just a quick way to get started with assigning part labels to your circuit.

[b]Test circuit[/b]

This uses the Title of your circuit to search for a test script (see the Nand2Tetris tab) under the directory that is specified in the settings for the Test Directory.

A warning is displayed if the test file cannot be found.

[b]Load HDL circuit[/b]

This generates the Input and Output pins for a circuit from the data contained in an HDL specification file  (see the Nand2Tetris tab).

It's up to you to create the internal circuit to connect the inputs to the outputs to fulfill the function of the circuit, and then test it.

[b]Disassembler[/b]

This tool is used to load .hack files that contain words of machine code, and converts these into Assembly language to help you to understand the code that it represents.

[b]List Warnings[/b]

View a list of recent warnings for the current circuit.


"

[node name="Nand2Tetris" type="MarginContainer" parent="."]
visible = false
layout_mode = 2
theme_override_constants/margin_left = 10
theme_override_constants/margin_top = 10
theme_override_constants/margin_right = 10
theme_override_constants/margin_bottom = 10

[node name="RichText" type="RichTextLabel" parent="Nand2Tetris"]
layout_mode = 2
theme_override_colors/default_color = Color(0.152941, 0.152941, 0.152941, 1)
bbcode_enabled = true
text = "[b]Nand2Tetris Integration[/b]

This Digital Logic Simulation software is designed to be very flexible, but at the same time it is useful to support widely-adopted standards. One of these is [b]Nand2Tetris[/b] which offers a platform for learning how digital systems work from the ground up (a NAND gate to a working computer).

So an attempt has been made to support the .hdl (hardware description file format), .tst (circuit test specification), and .cmp (the output result comparison file format) of the Nand2Tetris platform. The relevant files are in a [i]tests[/i] directory.

In order to process these files, the path to their base directory needs to be set in the  [i]Test file directory[/i] setting in [b]Settings[/b].

These files are also shipped with the [i]Nand2tetris Software Suite[/i] from the [url=nand]Nand2Tetris Software[/url] website.

Once this is set up, you should be able to make use of them in the [i]Tools[/i] menu.

A set of IO pins may be automatically produced by loading an HDL file from the Tools menu. Then, you may construct a circuit to fulfill the requirements of the specification in the HDL file which may be displayed by clicking of the TextView part that is produced. Then run the tests on your circuit to see if it passes with the Test runner panel which is opened via the Tools menu.

Some circuits require a clock such as the CPU, so you need to use a Wire input named [i]clk[/i] for this.

When testing the Memory, please ignore this message: \"Before running this script, select the 'Screen' option from the 'View' menu\".

When testing the CPU, the [b]OutM[/b] pin has a high impedance state, so to simulate this a TriState output part needs to be used. Some circuit [i]templates[/i] are provided with the required IO pins to help.

Remember to set the Title of your circuit to the name of the Part that you will test against. The software uses the Title text to search for the required test files.




"

[node name="SpecialParts" type="MarginContainer" parent="."]
visible = false
layout_mode = 2
theme_override_constants/margin_left = 10
theme_override_constants/margin_top = 10
theme_override_constants/margin_right = 10
theme_override_constants/margin_bottom = 10

[node name="RichText" type="RichTextLabel" parent="SpecialParts"]
layout_mode = 2
theme_override_colors/default_color = Color(0.152941, 0.152941, 0.152941, 1)
bbcode_enabled = true
text = "[b]Special Parts[/b]

Some parts have functionality that is accessed by right-clicking on the part to pop up a window. These parts are:

[ul]
IO - the popup panel allows for setting the number of wires, the number range, colors of wires, naming of pins, and to change the data value via a slider, step buttons, or by editing the value
ROM - the popup panel allows for choosing a data file (in .hack or .bin format) to load into the memory
RAM - the popup panel provides a hex viewer/editor for the contents of the memory
Block - view the heirarchy of embedded circuits
TextView - the popup panel allows for choosing a text file to be associated with this part
Note - this allows for keeping some notes to save with your circuit
[/ul]

[b]MemoryInjector[/b]
This part is used when testing RAM where the test involves setting a value in memory. It is set to an address value and connected to any bus output of the memory chip. Also, it needs a name to correspond with an input pin defined in the test script.

[b]MemoryProbe[/b]
This part is used by the tester to monitor the value stored at a memory address that is set on the part. The part is attached to any bus output of the memory chip.

[b]Wire[/b] - used for tester input and output pins.
[b]Bus[/b] -  also used for tester input and output pins.

[b]RAM Memory Inspector[/b]
Using this pop-up panel of a RAM chip, you are able to step through pages of the memory to view the contents of the words/bytes of data and see any ASCII characters that may be present.

The data cells are editable. You may enter a decimal, hex (0xff) or binary (b1000) style of input value and press Enter to change the value.

Hovering the mouse over a cell will display the value in binary form.

You may also erase the memory, and reconfigure its size and bit depth.

The Save feature allows the memory contents to be saved as bytes to a .bin file which may be loaded into a ROM.

[b]Keyboard[/b] allows for entering key codes by typing in its' text input box.

[b]BusTap[/b]  allows for splitting out a data bit from a bus to a wire. The bit number is specified on the part.

[b]Display[/b]
This allows for 1 or more 7 segment displays with an optional decimal point. The color may be set and the display mode.
The input value is displayed as decimal, hexadecimal, binary, or something approximating the ASCII character for each byte.
The dp_select input value sets the position of the decimal point for values over zero. Zero means don't show a decimal point.

[b]Clock[/b]
This has a clock pulse output and a reset output. The reset is toggled high and low with each press of the button.
The clock may be manually toggled or the slider bar moved to set a constant rate of pulses.

[b]Screen[/b]
The screen part has a 256 x 512 pixel display and operates in the same way as a 16bit 8K RAM.
Each row of the physical screen, is represented in the
Screen memory map by 32 consecutive 16-bit words, starting at the top left corner.

[b]ALU[/b]

This part implements the Nand2Tetris ALU according to the following specification:

// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the output bits:
 * zr = (out == 0, 1, 0)
 * ng = (out < 0,  1, 0)
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not





"
